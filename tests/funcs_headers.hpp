#ifndef FUNCS_HEADERS_HPP
#define FUNCS_HEADERS_HPP

void	vector_constuct_my();
void	vector_constuct_std();
void	vector_asinnation_my();
void	vector_asinnation_std();
void	vector_begin_end_my();
void	vector_begin_end_std();
void	vector_reverse_begin_end_my();
void	vector_reverse_begin_end_std();
void	vector_size_my();
void	vector_size_std();
void	vector_max_size_my();
void	vector_max_size_std();
void	vector_resize_my();
void	vector_resize_std();
void	vector_reserve_my();
void	vector_reserve_std();
void	vector_sq_brackets_my();
void	vector_sq_brackets_std();
void	vector_at_my();
void	vector_at_std();
void	vector_front_my();
void	vector_front_std();
void	vector_back_my();
void	vector_back_std();
void	vector_assign_my();
void	vector_assign_std();
void	vector_push_pop_back_my();
void	vector_push_pop_back_std();
void	vector_insert_my();
void	vector_insert_std();
void	vector_erase_my();
void	vector_erase_std();
void	vector_swap_my();
void	vector_swape_std();
void	vector_clear_my();
void	vector_clear_std();
void	vector_get_allocator_my();
void	vector_get_allocator_std();
void	vector_relation_op_my();
void	vector_relation_op_std();

void	stack_construct_my();
void	stack_construct_std();
void	stack_size_push_pop_top_my();
void	stack_size_push_pop_top_std();

void	map_construct_my();
void	map_construct_std();
void	pair_tests_my();
void	pair_tests_std();
void	begin_end_my();
void	begin_end_std();
void	rbegin_end_my();
void	rbegin_end_std();
void	max_size_my();
void	max_size_std();
void	sq_brackets_my();
void	sq_brackets_std();
void	insert_my();
void	insert_std();
void	erase_my();
void	erase_std();
void	swap_my();
void	swap_std();
void	clear_my();
void	clear_std();
void	key_comp_my();
void	key_comp_std();
void	value_comp_my();
void	value_comp_std();
void	find_my();
void	find_std();
void	count_my();
void	count_std();
void	lower_upper_bound_my();
void	lower_upper_bound_std();
void	equal_range_my();
void	equal_range_std();
void	get_allocator_my();
void	get_allocator_std();
void	map_relation_op_my();
void	map_relation_op_std();

void test_speed_map();
void test_speed_vector();
void test_speed_stack();

#endif
